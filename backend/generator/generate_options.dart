// Generated by https://quicktype.io

import 'dmmf.dart';

class GenerateOptions {
  String datamodel;
  List<Datasource> datasources;
  Generator generator;
  List<Generator> otherGenerators;
  Dmmf dmmf;
  String schemaPath;
  String version;

  GenerateOptions({
    required this.datamodel,
    required this.datasources,
    required this.generator,
    required this.dmmf,
    this.otherGenerators = const [],
    required this.schemaPath,
    required this.version,
  });

  static GenerateOptions fromJson(Map json) {
    return GenerateOptions(
      datamodel: json['datamodel'],
      version: json['version'],
      schemaPath: json['schemaPath'],
      datasources: (json['datasources'] as List).map((e) => Datasource.fromJson(e)).toList(),
      otherGenerators: (json['otherGenerators'] as List).map((e) => Generator.fromJson(e)).toList(),
      generator: Generator.fromJson(json['generator']),
      dmmf: Dmmf.fromJson(json['dmmf']),
    );
  }
}

class Datasource {
  String name;
  String provider;
  String activeProvider;
  EnvValue url;

  Datasource({
    required this.name,
    required this.provider,
    required this.activeProvider,
    required this.url,
  });

  static Datasource fromJson(Map json) {
    return Datasource(
      name: json['name'],
      provider: json['provider'],
      activeProvider: json['activeProvider'],
      url: EnvValue.fromJson(json['url']),
    );
  }
}

class Generator {
  String name;
  EnvValue provider;
  EnvValue output;
  Map config;
  List<EnvValue> binaryTargets;
  List<String> previewFeatures;
  bool isCustomOutput;

  Generator({
    required this.name,
    required this.provider,
    required this.output,
    this.config = const {},
    this.binaryTargets = const [],
    this.previewFeatures = const [],
    this.isCustomOutput = false,
  });

  static Generator fromJson(Map json) {
    return Generator(
      name: json['name'],
      config: json['config'],
      isCustomOutput: json['isCustomOutput'],
      binaryTargets: (json['binaryTargets'] as List).map((e) => EnvValue.fromJson(e)).toList(),
      previewFeatures: (json['previewFeatures'] as List).map<String>((e) => e).toList(),
      provider: EnvValue.fromJson(json['provider']),
      output: EnvValue.fromJson(json['output']),
    );
  }
}

class EnvValue {
  String? fromEnvVar;
  String? value;

  EnvValue({
    this.fromEnvVar,
    this.value,
  });

  static EnvValue fromJson(Map json) {
    return EnvValue(
      fromEnvVar: json['fromEnvVar'],
      value: json['value'],
    );
  }
}
