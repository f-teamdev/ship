openapi: 3.0.0
info:
  description: "API sistema de gerenciamento de desenvolvedores da FTeam"
  version: "1.0.8"
  title: "Swagger Ship"
servers:
  - url: https://dev.shipstore.info
    description: Developer server
  - url: http://localhost:4000
    description: Local server
tags:
- name: "auth"
  description: "Autorização de usuário"
- name: "user"
  description: "Access to User"
- name: "file"
  description: "Upload e Download de arquivos"
paths:
  /auth/login:
    get:
      security:
        - basicAuth: [] 
      tags:
        - "auth"
      responses:
        '200':   
          description: Realizado login com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokenization"
  /auth/check_token:
    get:
      security:
        - bearerAuth: [] 
      tags:
        - "auth"
      responses:
        '200':   
          description: Checa autorização
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: string
  /auth/update_password:
    put:
      security:
        - bearerAuth: [] 
      tags:
        - "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                password:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':   
          description: Checa autorização
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: string
  /auth/refresh_token/{token}:
    get:
      tags:
        - "auth"
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: refreshToken
      responses:
        '200':   
          description: Atualiza token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokenization"          
  /file/upload:
    post:
      tags:
      - "file"
      security:
        - bearerAuth: [] 
      summary: "Upload de um arquivo"
      description: ""
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileReturn"
  /file/download/{file}:
    get:
      tags:
      - "file"
      summary: "Download file"
      description: ""
      operationId: "donwloadFile"
      parameters:
      - name: "file"
        in: "path"
        description: "file name"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary

  /user/{id}:
    get:
      tags:
      - "user"
      security:
        - bearerAuth: [] 
      summary: "get user by id"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "403":
          description: "Forbidden operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
  /user:
    get:
      tags:
      - "user"
      security:
        - bearerAuth: [] 
      summary: "get all user"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
        "403":
          description: "Forbidden operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
    post:
      tags:
      - "user"
      security:
        - bearerAuth: [] 
      summary: "Create a use"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEntity"
              
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "403":
          description: "Forbidden operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:   
      type: http
      scheme: basic
  schemas:
    ErrorEntity:
      type: "object"
      properties:
        error:
          type: string
    FileReturn:
      type: "object"
      properties:
        image:
          type: string
    Tokenization:
      type: "object"
      properties:
        expiresIn:
          type: integer
        accessToken:
          type: string
        refreshToken:
          type: string
    UserEntity:
      type: "object"
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        imageUrl:
          type: string
        active:
          type: boolean
        role:
          type: string
          default: "user"
          enum:
            - "dev"
            - "manager"
            - "admin"


